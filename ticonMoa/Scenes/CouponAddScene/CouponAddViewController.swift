//
//  CouponAddViewController.swift
//  ticonMoa
//
//  Created by 채훈기 on 2021/07/08.
//  Copyright (c) 2021 hoon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol CouponAddDisplayLogic: class {
    func displayFetchedPhoto(viewModel: CouponAdd.fetchPhoto.ViewModel)
}

class CouponAddViewController: UIViewController, CouponAddDisplayLogic {
    var interactor: CouponAddBusinessLogic?
    var router: (NSObjectProtocol & CouponAddRoutingLogic & CouponAddDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CouponAddInteractor()
        let presenter = CouponAddPresenter()
        let router = CouponAddRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupCollectionView()
        fetchPhotos()
    }
    
    // MARK: fetch Photos
    
    var displayedPhoto: [UIImage] = []
    
    func fetchPhotos() {
        let request = CouponAdd.fetchPhoto.Request()
        interactor?.fetchPhotos(request: request)
    }
    
    func displayFetchedPhoto(viewModel: CouponAdd.fetchPhoto.ViewModel) {
        collectionView.reloadData()
    }
    
    let header: CouponAddHeader = {
        let header = CouponAddHeader()
        return header
    }()
    
    let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.backgroundColor = .systemGray3
        return imageView
    }()
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collection = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collection.backgroundColor = .systemGray2
        return collection
    }()
}

extension CouponAddViewController {
    
    @objc func xmarkTouched() {
        self.dismiss(animated: true, completion: nil)
    }
    
    func setupUI() {
        view.backgroundColor = .systemBackground
        [header, imageView, collectionView].forEach {
            view.addSubview($0)
        }
        header.xmarkIcon.addTarget(self, action: #selector(xmarkTouched), for: .touchUpInside)
 
        collectionView.delegate = self
        collectionView.dataSource = self
        
        imageView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview()
            make.top.equalTo(header.snp.bottom)
            make.height.equalTo(300)
        }
        
        header.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide)
            make.height.equalTo(43)
            make.leading.trailing.equalToSuperview()
        }
        
        collectionView.snp.makeConstraints { make in
            make.leading.trailing.bottom.equalToSuperview()
            make.top.equalTo(imageView.snp.bottom)
        }
    }
}

extension CouponAddViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    var cellName: String { "PhotoCell" }
    
    func setupCollectionView() {
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.alwaysBounceVertical = true
        collectionView.register(PhotoCell.self, forCellWithReuseIdentifier: cellName)
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellName, for: indexPath) as? PhotoCell else {
            return PhotoCell()
        }
        cell.backgroundColor = .white
        return cell
    }
}
