//
//  CouponScanInteractor.swift
//  ticonMoa
//
//  Created by 채훈기 on 2021/07/09.
//  Copyright (c) 2021 hoon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Vision

protocol CouponScanBusinessLogic {
    func scanPhoto(request: CouponScan.ScanPhoto.Request)
    func registerCoupon(request: CouponScan.RegisterCoupon.Request)
}

protocol CouponScanDataStore {
    var image: UIImage? { get set }
}

class CouponScanInteractor: CouponScanBusinessLogic, CouponScanDataStore {
    var presenter: CouponScanPresentationLogic?
    var worker: CouponScanWorker?
    
    // MARK: DataStore
    
    var image: UIImage?
    var barcodePayload: String?
    
    // MARK: Scan Photo
    
    func scanPhoto(request: CouponScan.ScanPhoto.Request) {
        guard let image = image?.cgImage else { return }
        worker = CouponScanWorker()
        worker?.scanPhotoBarcode(image: image, completionHandler: barcodeHandler)
    }
    
    func barcodeHandler(request: VNRequest, error: Error?) {
        guard let bestResult = request.results?.first as? VNBarcodeObservation,
              let payload = bestResult.payloadStringValue,
              let image = self.image?.cgImage
        else {
            createAlertMessage(type: .notContainBarcode)
            return
        }
        self.barcodePayload = payload
        worker?.scanPhotoText(image: image, completionHandler: recognizeTextHandler)
    }
    
    func recognizeTextHandler(request: VNRequest, error: Error?) {
        guard let results = request.results as? [VNRecognizedTextObservation],
              results.count < 15 else {
            createAlertMessage(type: .failRecognizePhoto)
            return }
        analyzeTextObservation(results: results)
    }
    
    func analyzeTextObservation(results: [VNRecognizedTextObservation]) {
        guard let image = image, let worker = worker else { return }
        let cropped = results.compactMap { worker.cropImage(image: image, result: $0)}
        let resultOCR = worker.requestOCRWithTesseract(image: cropped)
        let kind = worker.analyzeOCRResult(data: resultOCR)
        let lines = resultOCR.map { $0.joined(separator: "") }
        let response = worker.analyzeCoupon(data: lines, kind: kind, barcode: barcodePayload)
        presenter?.presentScanResult(response: response)
    }
    
    // MARK: Register Coupon
    
    func registerCoupon(request: CouponScan.RegisterCoupon.Request) {
        worker = CouponScanWorker()
        guard let worker = self.worker else { return }
        let result = worker.isVaildCoupon(request: request)
        
        switch result {
        case .success:
            let coupon = makeCoupon(request: request)
            worker.saveCouponToCoreData(coupon: coupon)
            worker.saveCouponImage(name: coupon.identifier.uuidString,
                                   image: image)
            presenter?.finishCouponSave()
        case .dateFormatError:
            createAlertMessage(type: .notMatchDateFormat)
        case .barcodeDuplicated:
            createAlertMessage(type: .barcodeDuplicated)
        case .inputValueError:
            createAlertMessage(type: .inputValueEmpty)
        }
    }
    
    func makeCoupon(request: CouponScan.RegisterCoupon.Request) -> Coupon {
        let form = request.expiredDate.toDate(format: "yyyy.MM.dd") ?? Date()
        return Coupon(
            id: UUID(),
            name: request.name,
            barcode: request.barcode,
            brand: request.brand,
            date: form, category: "",
            registerDate: Date())
    }
    
    enum AlertMessage {
        case inputValueEmpty
        case notMatchDateFormat
        case notContainBarcode
        case failRecognizePhoto
        case barcodeDuplicated
    }
    
    func createAlertMessage(type: AlertMessage) {
        var message = ""
        switch type {
        case .failRecognizePhoto:
            message = "사진을 분석하지 못했습니다."
        case .inputValueEmpty:
            message = "빈칸을 모두 입력하세요"
        case .notContainBarcode:
            message = "바코드를 인식하지 못했습니다."
        case .notMatchDateFormat:
            message = "날짜의 형식이 맞지 않습니다."
        case .barcodeDuplicated:
            message = "이미 등록된 쿠폰 입니다."
        }
        presenter?.presentAlert(response: .init(title: nil, message: message))
        presenter?.presentScanResult(response: .empty)
    }
}
