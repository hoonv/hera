//
//  CouponScanViewController.swift
//  ticonMoa
//
//  Created by 채훈기 on 2021/07/09.
//  Copyright (c) 2021 hoon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CouponScanDisplayLogic: class {
    func displayScanResult(viewModel: CouponScan.ScanPhoto.ViewModel)
    func displayAlert(viewModel: CouponScan.RegisterCoupon.Alert)
    func finishCouponSave()
}

class CouponScanViewController: UIViewController, CouponScanDisplayLogic {
    var interactor: CouponScanBusinessLogic?
    var router: (NSObjectProtocol & CouponScanRoutingLogic & CouponScanDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CouponScanInteractor()
        let presenter = CouponScanPresenter()
        let router = CouponScanRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        scanImageOCR()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    // MARK: ScanImage OCR

    var ratio: CGFloat {
        let size = self.router?.dataStore?.image?.size
        let ratio = size?.height ?? 1.6 / (size?.width ?? 1.0)
        return ratio
    }
    
    func scanImageOCR() {
        let request = CouponScan.ScanPhoto.Request()
        interactor?.scanPhoto(request: request)
    }
    
    func displayScanResult(viewModel: CouponScan.ScanPhoto.ViewModel) {
        DispatchQueue.main.async {
            self.inputForm.configureTextFeild(viewModel: viewModel)
            self.imageView.image = self.router?.dataStore?.image
            self.imageView.backgroundColor = .systemBackground
            self.indicator.stopAnimating()
        }
    }
    
    // MARK: Register Coupon
    
    func registerCoupon() {
        let texts = inputForm.textsInInput
        interactor?.registerCoupon(request: .init(name: texts[0] ?? "",
                                                  brand: texts[1] ?? "",
                                                  barcode: texts[2] ?? "",
                                                  expiredDate: texts[3] ?? "",
                                                  image: imageView.image!))
    }
    
    func displayAlert(viewModel: CouponScan.RegisterCoupon.Alert) {
        alert(message: viewModel.message)
    }
    
    func finishCouponSave() {
        NotificationCenter.default.post(name: .couponListChanged, object: nil)
        self.dismiss(animated: true, completion: nil)
    }
    // MARK: View
    
    let header: CouponScanHeader = {
        let header = CouponScanHeader()
        return header
    }()
    
    let indicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.hidesWhenStopped = true
        indicator.startAnimating()
        return indicator
    }()
    
    let inputForm: PhotoScanInputForm = {
        let view = PhotoScanInputForm()
        return view
    }()
    
    let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.layer.cornerRadius = 10
        imageView.clipsToBounds = true
        imageView.backgroundColor = .systemGray
        imageView.contentMode = .scaleAspectFit
        return imageView
    }()
    
    let whiteView: UIView = {
        let view = UIView()
        view.backgroundColor = .systemBackground
        return view
    }()
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
}

extension CouponScanViewController {
    
    @objc func touchedBackIcon() {
        self.navigationController?.popViewController(animated: true)
    }
    
    @objc func touchedCompleteIcon() {
        self.registerCoupon()
    }
    
    func keyboardWillShow() {
        imageView.snp.remakeConstraints { make in
            make.top.equalTo(header.snp.bottom).offset(-200)
            make.centerX.equalToSuperview()
            make.width.equalToSuperview().multipliedBy(0.5)
            make.height.equalTo(imageView.snp.width).multipliedBy(min(ratio, 1.6))
        }
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    func keyboardWillHide() {
        imageView.snp.remakeConstraints { make in
            make.top.equalTo(header.snp.bottom).offset(10)
            make.centerX.equalToSuperview()
            make.width.equalToSuperview().multipliedBy(0.5)
            make.height.equalTo(imageView.snp.width).multipliedBy(min(ratio, 1.6))
        }
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    func setupUI() {
        header.backIcon.addTarget(self, action: #selector(touchedBackIcon), for: .touchUpInside)
        header.completeIcon.addTarget(self, action: #selector(touchedCompleteIcon), for: .touchUpInside)
        inputForm.keyboardWillShow = keyboardWillShow
        inputForm.keyboardWillHide = keyboardWillHide
        
        self.view.backgroundColor = .systemBackground
        
        [imageView, indicator, header, whiteView, inputForm].forEach {
            view.addSubview($0)
        }
        
        inputForm.snp.makeConstraints { make in
            make.bottom.equalToSuperview()
            make.top.equalTo(imageView.snp.bottom).offset(32)
            make.leading.equalToSuperview().offset(12)
            make.trailing.equalToSuperview().offset(-12)
        }
        
        indicator.snp.makeConstraints { make in
            make.centerX.equalTo(imageView)
            make.centerY.equalTo(imageView)
        }
        
        imageView.snp.makeConstraints { make in
            make.top.equalTo(header.snp.bottom).offset(10)
            make.centerX.equalToSuperview()
            make.width.equalToSuperview().multipliedBy(0.5)
            make.height.equalTo(imageView.snp.width).multipliedBy(min(ratio, 1.6))
        }

        header.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide)
            make.height.equalTo(43)
            make.leading.trailing.equalToSuperview()
        }
        
        whiteView.snp.makeConstraints { make in
            make.top.equalTo(view.snp.top)
            make.leading.trailing.equalToSuperview()
            make.bottom.equalTo(header.snp.top)
        }
    }
}
